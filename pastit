#!/bin/bash

#### CONFIG - CHANGE THESE ####

# Set this to your zipline url*
URL=ENTER_YOUR_ZIPLINE_URL_HERE/api/upload

## *If your host machine is the same machine you are running this script on, I suggest using http://localhost:{PORT NUMBER} (obviously replace {PORT NUMBER} with the port number you setup zipline on) instead, since it is easier.

# Set this to your zipline authorization token (I found this in the generated sharex config file)
authorizationtoken=ENTER_YOUR_ZIPLINE_AUTHORIZATION_TOKEN_HERE

# Default extension (.sh/.py/.zsh)
# This will be used if the file you provided has no common extension, I.E. stuff like .zshrc, or /etc/hosts. This helps zipline offer a default type of syntax highlighting, usually base this around what OS youre using. So by default I made it 'sh' so that extensionless files get bash script syntax highlighting.
defaultextension=sh

# Consider files starting with dot as extensionless (true/false)
considerFilesStartingWithDotExtensionless=true

#### END CONFIG ####

#### SCRIPT START ####
# Check if text is provided via stdin
if [ -z "$1" ]; then
    if [ -p /dev/stdin ]; then
        # Read piped input into a variable
        data="$(cat)"
    else
        echo "No input provided."
        exit 1
    fi
else
    data="$(cat "$1")"
fi

# Check if the file has an extension, if not add default extension
filename=$(basename -- "$1")
extension="${filename##*.}"
if [ "$extension" == "$filename" ] || ( $considerFilesStartingWithDotExtensionless && [[ "$filename" == .* ]] ); then
    filename="${filename}.$defaultextension"
fi

# Create the file in the /tmp directory
output_file="/tmp/_${filename}"

# Write data to the file
echo "$data" > "$output_file"

# API endpoint and headers
url="$URL"
authorization_token="$authorizationtoken"

# Sending the request using curl and capturing the response
response=$(curl -s -X POST -H "Authorization: $authorization_token" \
                        -H "Format: random" \
                        -H "Original-Name: true" \
                        -F "file=@${output_file}" \
                        $url)

# Extracting just the URL from the JSON response
file_url=$(echo "$response" | jq -r '.files[0]')

# Replace /u/ with /code/ in the URL
modified_url=$(echo "$file_url" | sed 's|/u/|/code/|')

# Output the modified URL
echo "$modified_url"

# Clean up: Remove temporary file
rm "$output_file"
